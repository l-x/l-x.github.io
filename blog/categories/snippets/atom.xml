<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Snippets | l-x.github.io]]></title>
  <link href="http://l-x.github.io/blog/categories/snippets/atom.xml" rel="self"/>
  <link href="http://l-x.github.io/"/>
  <updated>2014-12-10T17:40:18+01:00</updated>
  <id>http://l-x.github.io/</id>
  <author>
    <name><![CDATA[l-x]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Call_user_func_struct]]></title>
    <link href="http://l-x.github.io/blog/2014/09/29/call-user-func-struct/"/>
    <updated>2014-09-29T15:22:56+02:00</updated>
    <id>http://l-x.github.io/blog/2014/09/29/call-user-func-struct</id>
    <content type="html"><![CDATA[<p>Wrapper function hack for <code>call_user_func_array</code> which enables you to use keyword arguments on PHP functions and methods. It aims to be as close as possible to the behavior of <code>call_user_func_array</code>.</p>

<!--more-->


<p><div><script src='http://www.gistfy.com/github/gist/7581105'></script>
<noscript><pre><code>&lt;?php

/**
 * @link https://boolshit.de/2013/11/calling-php-functions-with-keyword-arguments/
 * 
 * @param callback $function
 * @param array    $param_struct
 *
 * @return mixed
 */
function call_user_func_struct($function, array $param_struct) {

	/**
	 * @param callback $function
	 *
	 * @return ReflectionFunction|ReflectionMethod
	 */
	$getReflection = function ($function) {
		switch(true) {
			case ($function instanceof \Closure):
			case (is_string($function) &amp;&amp; function_exists($function));
				return new \ReflectionFunction($function);
				break;
			case (is_string($function) &amp;&amp; strpos($function, '::') !== false):
				$function = explode('::', $function, 2);
			case (is_array($function) &amp;&amp; count($function) == 2 &amp;&amp; (is_object($function[0]) || is_string($function[0])) &amp;&amp; is_string($function[1])):
				return new \ReflectionMethod($function[0], $function[1]);
				break;
			default:
				trigger_error(sprintf(&quot;call_user_func_array() expects parameter 1 to be a valid callback, function '%s' not found or invalid function name&quot;, print_r($function, true)), E_USER_WARNING);
				exit;
				break;
		}
	};

	/**
	 * @param array                  $params
	 * @param \ReflectionParameter[] $reflection
	 *
	 * @return array
	 */
	$prepareArguments = function (array $params, array $reflection) {
		$prepared_arguments = array();

		foreach($reflection as $parameter) {
			if(isset($params[$parameter-&gt;getName()])) {
				$prepared_arguments[] = $params[$parameter-&gt;getName()];
			} else if($parameter-&gt;isDefaultValueAvailable()) {
				$prepared_arguments[] = $parameter-&gt;getDefaultValue();
			} else {
				trigger_error(sprintf(&quot;Missing argument %s ($%s) &quot;, count($prepared_arguments) + 1, $parameter-&gt;getName()), E_USER_WARNING);
				exit;
			}
		}

		return $prepared_arguments;
	};

	return call_user_func_array($function, $prepareArguments($param_struct, $getReflection($function)-&gt;getParameters()));
}</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Messing Around With PHP's Late Static Binding]]></title>
    <link href="http://l-x.github.io/blog/2014/09/29/messing-around-with-phps-late-static-binding/"/>
    <updated>2014-09-29T14:39:58+02:00</updated>
    <id>http://l-x.github.io/blog/2014/09/29/messing-around-with-phps-late-static-binding</id>
    <content type="html"><![CDATA[<p>Some weird PHP behavior I stumbled over while debugging our software. This is known at least since 2009 (<a href="https://bugs.php.net/bug.php?id=50031">https://bugs.php.net/bug.php?id=50031</a>). Maybe this opens a few new possibilities for dependency injection or nasty hacks.</p>

<!--more-->


<p><div><script src='http://www.gistfy.com/github/gist/08e14a5060495add5842'></script>
<noscript><pre><code>&lt;?php
/**
 * @link https://l-x.github.io/blog/2014/09/29/messing-around-with-phps-late-static-binding/
 */

class A {

	public function createInstance() {
		/** 
		 * Calling method static even if 
		 * defined non-static in class B
		 */
		return B::createInstance();
	}
}

class B {

	public function createInstance() {
		return new static();
	}

}


$instance_of_A = new A();

$expected_instance_of_B = $instance_of_A-&gt;createInstance();

var_dump($expected_instance_of_B);

/**
 * Expected:
 * 
 * class B#2 (0) {
 * 
 * }
 * 
 * Result:
 * 
 * class A#2 (0) {
 * 
 * }
 * 
 */

</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Determine the Type of a PHP Array]]></title>
    <link href="http://l-x.github.io/blog/2014/09/03/determine-the-type-of-a-php-array/"/>
    <updated>2014-09-03T00:00:00+02:00</updated>
    <id>http://l-x.github.io/blog/2014/09/03/determine-the-type-of-a-php-array</id>
    <content type="html"><![CDATA[<p>PHP’s arrays are a mix of dictionaries and lists (i. e. in Python).</p>

<p>Sometimes you have to determine if an array is indexed (<code>array('foo', 'bar', 'baz')</code>) or key => value based (<code>array('foo' =&gt; 'bar', 'herp' =&gt; 'derp')</code>).</p>

<p>Unfortunately PHP has no built-in method to do so. One of the good solutions I’ve ran across is to use the  <code>array_filter()</code> on the array’s keys to determine if they’re all integers:</p>

<!--more-->


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">is_array_indexed</span><span class="p">(</span><span class="nv">$array</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">count</span><span class="p">(</span><span class="nb">array_filter</span><span class="p">(</span><span class="nb">array_keys</span><span class="p">(</span><span class="nv">$array</span><span class="p">),</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nb">is_int</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span> <span class="o">==</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$array</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This function simply compares the number of items which keys are integers to the number of all items in the array. If both are equal the array is indexed.</p>

<p>As a variation one could use <code>is_string()</code> instead of <code>is_int()</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">is_array_indexed</span><span class="p">(</span><span class="nv">$array</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">count</span><span class="p">(</span><span class="nb">array_filter</span><span class="p">(</span><span class="nb">array_keys</span><span class="p">(</span><span class="nv">$array</span><span class="p">),</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nb">is_string</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The advantage of this variant is that no additional count($array) is required, so it should be slightly faster than the first variant.</p>

<p>Both examples can easily be modified to return the type of the array:</p>

<p><div><script src='http://www.gistfy.com/github/gist/7765283'></script>
<noscript><pre><code>&lt;?php

/**
 * @link https://l-x.github.io/blog/2014/09/03/determine-the-type-of-a-php-array/
 * 
 * @param array $array
 *
 * @return int
 */
function get_array_type(array $array) {
	$keyvalue_count = count(array_filter(array_keys($array), 'is_string'));
	
	switch ($keyvalue_count) {
		case 0: 		return 0; //completely indexed or empty array
		case count($array): 	return 1; // completely key=&gt;value based array
		default: 		return 2; // mixed array
	}
}</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
