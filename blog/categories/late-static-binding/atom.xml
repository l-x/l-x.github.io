<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Late Static Binding | l-x.github.io]]></title>
  <link href="http://l-x.github.io/blog/categories/late-static-binding/atom.xml" rel="self"/>
  <link href="http://l-x.github.io/"/>
  <updated>2014-09-29T15:33:39+02:00</updated>
  <id>http://l-x.github.io/</id>
  <author>
    <name><![CDATA[l-x]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Messing Around With PHP's Late Static Binding]]></title>
    <link href="http://l-x.github.io/blog/2014/09/29/messing-around-with-phps-late-static-binding/"/>
    <updated>2014-09-29T14:39:58+02:00</updated>
    <id>http://l-x.github.io/blog/2014/09/29/messing-around-with-phps-late-static-binding</id>
    <content type="html"><![CDATA[<p>Some weird PHP behavior I stumbled over while debugging our software. This is known at least since 2009 (<a href="https://bugs.php.net/bug.php?id=50031">https://bugs.php.net/bug.php?id=50031</a>). Maybe this opens a few new possibilities for dependency injection or nasty hacks.</p>

<!--more-->


<p><div><script src='https://gist.github.com/08e14a5060495add5842.js'></script>
<noscript><pre><code>&lt;?php

class A {

	public function createInstance() {
		/** 
		 * Calling method static even if 
		 * defined non-static in class B
		 */
		return B::createInstance();
	}
}

class B {

	public function createInstance() {
		return new static();
	}

}


$instance_of_A = new A();

$expected_instance_of_B = $instance_of_A-&gt;createInstance();

var_dump($expected_instance_of_B);

/**
 * Expected:
 * 
 * class B#2 (0) {
 * 
 * }
 * 
 * Result:
 * 
 * class A#2 (0) {
 * 
 * }
 * 
 */

</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
