<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <logo>http://l-x.github.io/images/lx.png</logo>
  <title><![CDATA[l-x.github.io]]></title>
  <link href="http://l-x.github.io/atom.xml" rel="self"/>
  <link href="http://l-x.github.io/"/>
  <updated>2014-12-12T11:31:03+01:00</updated>
  <id>http://l-x.github.io/</id>
  <author>
    <name><![CDATA[l-x]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Create an Empty Branch With Git]]></title>
    <link href="http://l-x.github.io/blog/2014/12/11/git-create-empty-branch/"/>
    <updated>2014-12-11T10:49:20+01:00</updated>
    <id>http://l-x.github.io/blog/2014/12/11/git-create-empty-branch</id>
    <content type="html"><![CDATA[<p>Sometimes you need to create an emtpy branch, especially for <a href="https://github.com" title="GitHub">GitHub&rsquo;s</a> <a href="https://help.github.com/articles/user-organization-and-project-pages/#project-pages">project pages</a>. Below you will find the most simple solutin I&rsquo;ve found so far.</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git checkout --orphan gh-pages <span class="c"># create orphan branch</span>
</span><span class='line'>Switched to a new branch <span class="s1">&#39;gh-pages&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>git branch <span class="c"># make sure not to be in any branch</span>
</span><span class='line'>  master
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>git reset --hard HEAD <span class="c"># reset working tree</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>git commit --allow-empty -m <span class="s2">&quot;initial empty commit&quot;</span> <span class="c"># create empty commit, best practice</span>
</span><span class='line'><span class="o">[</span>gh-pages <span class="o">(</span>root-commit<span class="o">)</span> b00b135<span class="o">]</span> initial empty commit
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>git branch <span class="c"># check if the new branch was created</span>
</span><span class='line'>* gh-pages
</span><span class='line'>  master
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Call_user_func_struct]]></title>
    <link href="http://l-x.github.io/blog/2014/09/29/call-user-func-struct/"/>
    <updated>2014-09-29T15:22:56+02:00</updated>
    <id>http://l-x.github.io/blog/2014/09/29/call-user-func-struct</id>
    <content type="html"><![CDATA[<p>Wrapper function hack for <code>call_user_func_array</code> which enables you to use keyword arguments on PHP functions and methods. It aims to be as close as possible to the behavior of <code>call_user_func_array</code>.</p>

<!--more-->




<div><script src='http://www.gistfy.com/github/gist/7581105'></script>
<noscript><pre><code>&lt;?php

/**
 * @link http://l-x.github.io/blog/2014/09/29/call-user-func-struct/
 * 
 * @param callback $function
 * @param array    $param_struct
 *
 * @return mixed
 */
function call_user_func_struct($function, array $param_struct) {

    /**
     * @param callback $function
     *
     * @return ReflectionFunction|ReflectionMethod
     */
    $getReflection = function ($function) {
        switch(true) {
            case ($function instanceof \Closure):
            case (is_string($function) &amp;&amp; function_exists($function));
                return new \ReflectionFunction($function);
                break;
            case (is_string($function) &amp;&amp; strpos($function, '::') !== false):
                $function = explode('::', $function, 2);
            case (is_array($function) &amp;&amp; count($function) == 2 &amp;&amp; (is_object($function[0]) || is_string($function[0])) &amp;&amp; is_string($function[1])):
                return new \ReflectionMethod($function[0], $function[1]);
                break;
            default:
                trigger_error(sprintf(&quot;call_user_func_array() expects parameter 1 to be a valid callback, function '%s' not found or invalid function name&quot;, print_r($function, true)), E_USER_WARNING);
                exit;
                break;
        }
    };

    /**
     * @param array                  $params
     * @param \ReflectionParameter[] $reflection
     *
     * @return array
     */
    $prepareArguments = function (array $params, array $reflection) {
        $prepared_arguments = array();

        foreach($reflection as $parameter) {
            if(isset($params[$parameter-&gt;getName()])) {
                $prepared_arguments[] = $params[$parameter-&gt;getName()];
            } else if($parameter-&gt;isDefaultValueAvailable()) {
                $prepared_arguments[] = $parameter-&gt;getDefaultValue();
            } else {
                trigger_error(sprintf(&quot;Missing argument %s ($%s) &quot;, count($prepared_arguments) + 1, $parameter-&gt;getName()), E_USER_WARNING);
                exit;
            }
        }

        return $prepared_arguments;
    };

    return call_user_func_array($function, $prepareArguments($param_struct, $getReflection($function)-&gt;getParameters()));
}</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Messing Around With PHP's Late Static Binding]]></title>
    <link href="http://l-x.github.io/blog/2014/09/29/messing-around-with-phps-late-static-binding/"/>
    <updated>2014-09-29T14:39:58+02:00</updated>
    <id>http://l-x.github.io/blog/2014/09/29/messing-around-with-phps-late-static-binding</id>
    <content type="html"><![CDATA[<p>Some weird PHP behavior I stumbled over while debugging our software. This is known at least since 2009 (<a href="https://bugs.php.net/bug.php?id=50031">https://bugs.php.net/bug.php?id=50031</a>). Maybe this opens a few new possibilities for dependency injection or nasty hacks.</p>

<!--more-->


<div><script src='http://www.gistfy.com/github/gist/08e14a5060495add5842'></script>
<noscript><pre><code>&lt;?php
/**
 * @link https://l-x.github.io/blog/2014/09/29/messing-around-with-phps-late-static-binding/
 */

class A {

    public function createInstance() {
        /** 
         * Calling method static even if 
         * defined non-static in class B
         */
        return B::createInstance();
    }
}

class B {

    public function createInstance() {
        return new static();
    }

}


$instance_of_A = new A();

$expected_instance_of_B = $instance_of_A-&gt;createInstance();

var_dump($expected_instance_of_B);

/**
 * Expected:
 * 
 * class B#2 (0) {
 * 
 * }
 * 
 * Result:
 * 
 * class A#2 (0) {
 * 
 * }
 * 
 */

</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Determine the Type of a PHP Array]]></title>
    <link href="http://l-x.github.io/blog/2014/09/03/determine-the-type-of-a-php-array/"/>
    <updated>2014-09-03T00:00:00+02:00</updated>
    <id>http://l-x.github.io/blog/2014/09/03/determine-the-type-of-a-php-array</id>
    <content type="html"><![CDATA[<p>PHP’s arrays are a mix of dictionaries and lists (i. e. in Python).</p>

<p>Sometimes you have to determine if an array is indexed (<code>array('foo', 'bar', 'baz')</code>) or key => value based (<code>array('foo' =&gt; 'bar', 'herp' =&gt; 'derp')</code>).</p>

<p>Unfortunately PHP has no built-in method to do so. One of the good solutions I’ve ran across is to use the  <code>array_filter()</code> on the array’s keys to determine if they’re all integers:</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">is_array_indexed</span><span class="p">(</span><span class="nv">$array</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">count</span><span class="p">(</span><span class="nb">array_filter</span><span class="p">(</span><span class="nb">array_keys</span><span class="p">(</span><span class="nv">$array</span><span class="p">),</span> <span class="s1">&#39;is_int&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$array</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function simply compares the number of items which keys are integers to the number of all items in the array. If both are equal the array is indexed.</p>

<p>As a variation one could use <code>is_string()</code> instead of <code>is_int()</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">is_array_indexed</span><span class="p">(</span><span class="nv">$array</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">count</span><span class="p">(</span><span class="nb">array_filter</span><span class="p">(</span><span class="nb">array_keys</span><span class="p">(</span><span class="nv">$array</span><span class="p">),</span> <span class="s1">&#39;is_string&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The advantage of this variant is that no additional count($array) is required, so it should be slightly faster than the first variant.</p>

<p>Both examples can easily be modified to return the type of the array:</p>

<div><script src='http://www.gistfy.com/github/gist/7765283'></script>
<noscript><pre><code>&lt;?php

/**
 * @link https://l-x.github.io/blog/2014/09/03/determine-the-type-of-a-php-array/
 * 
 * @param array $array
 *
 * @return int
 */
function get_array_type(array $array) {
    $keyvalue_count = count(array_filter(array_keys($array), 'is_string'));
    
    switch ($keyvalue_count) {
        case 0:         return 0; //completely indexed or empty array
        case count($array):     return 1; // completely key=&gt;value based array
        default:        return 2; // mixed array
    }
}</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Zend Di and ServiceManager Run Standalone]]></title>
    <link href="http://l-x.github.io/blog/2014/08/28/making-zend-di-and-servicemanager-run-standalone/"/>
    <updated>2014-08-28T00:00:00+02:00</updated>
    <id>http://l-x.github.io/blog/2014/08/28/making-zend-di-and-servicemanager-run-standalone</id>
    <content type="html"><![CDATA[<p>Setting up the Zend Framework 2 DiC and ServiceManager inside a ZF2 MVC application is done by the framework, you will only have to write your configuration array.</p>

<p>If you plan to use this components standalone, i. e. in your own software, you will not find one word about how to achieve this goal.</p>

<!--more-->


<p>After digging through the application skelleton I found the solution below. Like in a MVC application the DiC works as a fallback to the ServiceManager instance, so you can ask the ServiceManager for a service only known to the Di container.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Zend\Di</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Zend\Mvc\Service\ServiceManagerConfig</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Zend\ServiceManager\ServiceManager</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Zend\ServiceManager\Di\DiAbstractServiceFactory</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * @see http://framework.zend.com/manual/2.3/en/modules/zend.service-manager.quick-start.html</span>
</span><span class='line'><span class="sd"> * @see http://framework.zend.com/manual/2.3/en/modules/zend.di.configuration.html</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="nv">$configuration</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;definition&#39;</span>        <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="cm">/* Zend\Di Configuration */</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;service_manager&#39;</span>   <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="cm">/* Zend\ServiceManager Configuration */</span><span class="p">),</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$di</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Di\Di</span><span class="p">();</span>
</span><span class='line'><span class="nv">$di</span><span class="o">-&gt;</span><span class="na">configure</span><span class="p">(</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">Di\Config</span><span class="p">(</span><span class="nv">$configuration</span><span class="p">[</span><span class="s1">&#39;definition&#39;</span><span class="p">])</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$service_manager</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ServiceManager</span><span class="p">(</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">ServiceManagerConfig</span><span class="p">(</span><span class="nv">$configuration</span><span class="p">[</span><span class="s1">&#39;service_manager&#39;</span><span class="p">])</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$service_manager</span><span class="o">-&gt;</span><span class="na">addAbstractFactory</span><span class="p">(</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">DiAbstractServiceFactory</span><span class="p">(</span><span class="nv">$di</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
